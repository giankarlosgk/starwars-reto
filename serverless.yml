service: sls-starwars-api-lambda-node-osd
plugins:
  - serverless-domain-manager
  - serverless-pseudo-parameters
  #- serverless-plugin-log-retention
custom:
  myStage: ${opt:stage, self:provider.stage}
  domains:
    dev: #CONFIGURAR DOMINIO
    qa: #CONFIGURAR DOMINIO
    prod: #CONFIGURAR DOMINIO
  securitygroups:
    dev:
      us-east-1: # virginia
        - #CONFIGURAR SECURITYGROUPS
      us-west-2: # oregon
        - #CONFIGURAR SECURITYGROUPS
    qa:
      us-east-1: # virginia
        - #CONFIGURAR SECURITYGROUPS
      us-west-2: # oregon
        - #CONFIGURAR SECURITYGROUPS
    prod:
      us-east-1: # virginia
        - #CONFIGURAR SECURITYGROUPS
      us-west-2: # oregon
        - #CONFIGURAR SECURITYGROUPS
  subnets:
    dev:
      us-east-1: # virginia
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
      us-west-2: # oregon
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
    qa:
      us-east-1: # virginia
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
      us-west-2: # oregon
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
    prod:
      us-east-1: # virginia
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
      us-west-2: # oregon
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
        - #CONFIGURAR SUBREDES
  customDomain:
    basePath: seguro
    endPointType: 'regional'
    domainName: ${self:custom.domains.${self:custom.myStage}}
    stage: "${self:custom.myStage}"
    createRoute53Record: true
  settings:
    dev:
      ACCOUND_ID: "#{AWS::AccountId}"
      REGION: ${self:provider.region}
      AWS_TABLE_AGENDA: test-table-agenda
      QUEUE_NAME_CITA_CSV: test-cita-queue
      S3_NAME_CITA_CSV: citacsv-test
      S3_NAME_CITA_CSV_VIRGINIA: citacsv-test-us-east-1
      S3_NAME_CITA_CSV_OREGON: citacsv-test-us-west-2
      LAMBDA_REQUEST_VALIDATOR: oauth2-qadrp-lambdaAuthorizer
      LAMBDA_REQUEST_VALIDATOR_RESULT_TTL: 0
    qa:
      ACCOUND_ID: "#{AWS::AccountId}"
      REGION: ${self:provider.region}
      LAMBDA_REQUEST_VALIDATOR: oauth2-qadrp-lambdaAuthorizer
      LAMBDA_REQUEST_VALIDATOR_RESULT_TTL: 0
    prod:
      ACCOUND_ID: "#{AWS::AccountId}"
      REGION: ${self:provider.region}
      AWS_TABLE_AGENDA: test-table-agenda
      QUEUE_NAME_CITA_CSV: test-cita-queue
      S3_NAME_CITA_CSV: citacsv-test
      S3_NAME_CITA_CSV_VIRGINIA: citacsv-test-us-east-1
      S3_NAME_CITA_CSV_OREGON: citacsv-test-us-west-2
      LAMBDA_REQUEST_VALIDATOR: oauth2-qadrp-lambdaAuthorizer
      LAMBDA_REQUEST_VALIDATOR_RESULT_TTL: 0
provider:
  name: aws
  runtime: nodejs20.x
  endpointType: REGIONAL
  enableAPIGLogs: true
  tracing:
    apiGateway: true
    lambda: true
  logRetentionInDays: 14
  environment: ${self:custom.settings.${self:custom.myStage}}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:DescribeTable"
        - "dynamodb:BatchWrite*"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.${self:custom.myStage}.AWS_TABLE_AGENDA}"
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
        - "sqs:ReceiveMessage"
        - "sqs:DeleteMessage"
        - "sqs:GetQueueAttributes"
      Resource:        
        - "arn:aws:sqs:${self:provider.region}:*:${self:custom.settings.${self:custom.myStage}.QUEUE_NAME_CITA_CSV}"        
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:DeleteObject"
      Resource:
        - "arn:aws:s3:::${self:custom.settings.${self:custom.myStage}.S3_NAME_CITA_CSV_VIRGINIA}"
        - "arn:aws:s3:::${self:custom.settings.${self:custom.myStage}.S3_NAME_CITA_CSV_OREGON}"
        - "arn:aws:s3:::${self:custom.settings.${self:custom.myStage}.S3_NAME_CITA_CSV_VIRGINIA}/*"
        - "arn:aws:s3:::${self:custom.settings.${self:custom.myStage}.S3_NAME_CITA_CSV_OREGON}/*"

  vpc:
      securityGroupIds: ${self:custom.securitygroups.${self:custom.myStage}.${self:provider.region}}
      subnetIds: ${self:custom.subnets.${self:custom.myStage}.${self:provider.region}}
functions: 
  postRegCita:
    handler: handlers/generate-appointment.handler
    timeout: 25
    events:
      - http:
          path: /cita
          method: post
          cors:
            origin: "*"
          authorizer:
            arn: "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:custom.settings.${self:custom.myStage}.LAMBDA_REQUEST_VALIDATOR}"
            resultTtlInSeconds: "${self:custom.settings.${self:custom.myStage}.LAMBDA_REQUEST_VALIDATOR_RESULT_TTL}"
            type: request
            identitySource: method.request.header.Authorization         
    logRetentionInDays: 14
  postGetCitas:
    handler: handlers/get-citas.handler
    timeout: 25
    events:
      - http:
          path: /citas
          method: post
          cors:
            origin: "*"
          authorizer:
            arn: "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:custom.settings.${self:custom.myStage}.LAMBDA_REQUEST_VALIDATOR}"
            resultTtlInSeconds: "${self:custom.settings.${self:custom.myStage}.LAMBDA_REQUEST_VALIDATOR_RESULT_TTL}"
            type: request
            identitySource: method.request.header.Authorization         
    logRetentionInDays: 14  
resources:
  Resources:
    #Create SQS 
    Queuengrclientecsv:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.settings.${self:custom.myStage}.QUEUE_NAME_CITA_CSV}